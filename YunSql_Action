# 202009011640001
from openpyxl import load_workbook
from openpyxl.styles import PatternFill  # 导入填充模块
from openpyxl import Workbook
import datetime
import time

import requests
from pyquery import PyQuery

# 域名与建站所有产品campaignId
campaignId_lists = []  # id总表
price_lists = []  # 价格总表
old_lists = []  # 原价总表

# 后端价格汇总
Price_new = []
Price_old = []
Price_campaignId = []

Project_name = '云数据库'
Time1 = datetime.datetime.now().strftime('%Y-%m-%d %H-%M-%S')

Ym_api = 'https://cloudtest.baidu.com/api/yunying/discount/login/info/order'  # 接口地址
Page_Path = "https://cloud.baidu.com/campaign/Promotiondata/index.html?unifrom=eventpage"  # 前端地址
page_headers = {
    'Cookie': 'BAIDUID=5B404BAA7FC206FC6BD0CE379AD0E88F:FG=1; UUAP_P_TOKEN=PT-507223917760761857-r5N6QoBAae-uuap; SECURE_UUAP_P_TOKEN=PT-507223917760761857-r5N6QoBAae-uuap; BSG_B_TOKEN=3UaasTcl7sy9jCzBPHgOzghGnYqAdkBU1Cv9mZq3L3lCcyMpeX8KfDKYctpsdBtfqD+DDLqVq/Me/+zaSFZiTq36oYUXaRMPtMOLm1uRqfk=; SECURE_BSG_B_TOKEN=3UaasTcl7sy9jCzBPHgOzghGnYqAdkBU1Cv9mZq3L3lCcyMpeX8KfDKYctpsdBtfqD+DDLqVq/Me/+zaSFZiTq36oYUXaRMPtMOLm1uRqfk=; BIDUPSID=5B404BAA7FC206FC6BD0CE379AD0E88F; PSTM=1598870166; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; __yjsv5_shitong=1.0_7_8959ac94981c268e5e2f7f0fe7ec36e5b05d_300_1598950247666_220.181.38.113_ce6a577f; BIDUPSID_BFESS=5B404BAA7FC206FC6BD0CE379AD0E88F; _ga=GA1.2.2065308476.1599012151; _gid=GA1.2.88460807.1599012151; AGL_USER_ID=155c7a23-e91f-45ff-8595-0b397e973286; bce-userbind-source=PASSPORT%3BUUAP; bce-ctl-client-cookies="BDUSS,bce-passport-stoken,bce-device-cuid,bce-device-token,BAIDUID"; bce-auth-type=PASSPORT; bce-ctl-sessionmfa-cookie=bce-session; bce-login-type=PASSPORT; bce-login-display-name=%E5%8D%8A%E8%BD%BD%E5%8A%A0%E4%B8%80; Hm_lvt_28a17f66627d87f1d046eae152a1c93d=1599012153,1599012524,1599017006; BDRCVFR[feWj1Vr5u3D]=I67x6TjHwwYf0; delPer=0; H_PS_PSSID=32606_1441_32693_7544_31660_32046_32116_31321_32691; jshunter-uuid=8c6e3e91-47b3-4f26-bf93-da91c70761ee; jsdk-user=v_dingguoqiang; RT="z=1&dm=baidu.com&si=k98ov4yyjc&ss=kel0lprq&sl=22&tt=1nsx&bcn=https%3A%2F%2Ffclog.baidu.com%2Flog%2Fweirwood%3Ftype%3Dperf&ld=gfeu&cl=cgpw&ul=htka&hd=htkl"; bce-device-token=null; PSINO=2; BDUSS=R3UFY4eW4zdGIzZ2pIM1dKTUNGR1U3ejZNRVV6NnMxU2wzLVJhbGlGWFV-WFpmRUFBQUFBJCQAAAAAAAAAAAEAAACFA67ysOvU2LzT0rsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANRwT1~UcE9fUH; BDUSS_BFESS=R3UFY4eW4zdGIzZ2pIM1dKTUNGR1U3ejZNRVV6NnMxU2wzLVJhbGlGWFV-WFpmRUFBQUFBJCQAAAAAAAAAAAEAAACFA67ysOvU2LzT0rsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANRwT1~UcE9fUH; __xsptplusUT_861=1; bce-passport-stoken=8971ac3c4422f4b9cc62c88f000d4a6c67793a68ca83a2280d50988fe58907cf; bce-sessionid=001d4194bdfbb2a455f9d50abb988c4bebc; bce-user-info=2020-09-02T18:15:50Z|139d19a80446c41aae21e735981acae8; bce-session=5f6e97b64dc946eb99341d3dae78033f11e7a28e06314f8ea4ca8d8b84aeec37|92c0832d05318aca545a69b053f9c471; bce-login-expire-time="2020-09-02T10:45:50Z|b4ea9db0e119facc270488eadce15de4"; __xsptplus861=861.5.1599041741.1599041928.5%234%7C%7C%7C%7C%7C%23%23uZU8bxzTJdlmwUq5bQor8161-Ptxg5YT%23; Hm_lpvt_28a17f66627d87f1d046eae152a1c93d=1599041929; _gat_gtag_UA_138572523_1=1; BAIDU_CLOUD_TRACK_PATH=https%3A%2F%2Fcloud.baidu.com%2Fcampaign%2FPromotiondata%2Findex.html%3F_%3D1599041750469%26unifrom%3Deventpage'    # 'csrftoken': '2020-08-13T18:37:18Z|4ed1e831797bd2b9df7e60135c888f5e',
    # 'Content-Type': 'application/json'
}
api_headers = {
    'Cookie': 'BAIDUID=5B404BAA7FC206FC6BD0CE379AD0E88F:FG=1; UUAP_P_TOKEN=PT-507223917760761857-r5N6QoBAae-uuap; SECURE_UUAP_P_TOKEN=PT-507223917760761857-r5N6QoBAae-uuap; BSG_B_TOKEN=3UaasTcl7sy9jCzBPHgOzghGnYqAdkBU1Cv9mZq3L3lCcyMpeX8KfDKYctpsdBtfqD+DDLqVq/Me/+zaSFZiTq36oYUXaRMPtMOLm1uRqfk=; SECURE_BSG_B_TOKEN=3UaasTcl7sy9jCzBPHgOzghGnYqAdkBU1Cv9mZq3L3lCcyMpeX8KfDKYctpsdBtfqD+DDLqVq/Me/+zaSFZiTq36oYUXaRMPtMOLm1uRqfk=; BIDUPSID=5B404BAA7FC206FC6BD0CE379AD0E88F; PSTM=1598870166; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; __yjsv5_shitong=1.0_7_8959ac94981c268e5e2f7f0fe7ec36e5b05d_300_1598950247666_220.181.38.113_ce6a577f; BIDUPSID_BFESS=5B404BAA7FC206FC6BD0CE379AD0E88F; _ga=GA1.2.2065308476.1599012151; _gid=GA1.2.88460807.1599012151; AGL_USER_ID=155c7a23-e91f-45ff-8595-0b397e973286; bce-userbind-source=PASSPORT%3BUUAP; bce-ctl-client-cookies="BDUSS,bce-passport-stoken,bce-device-cuid,bce-device-token,BAIDUID"; bce-auth-type=PASSPORT; bce-ctl-sessionmfa-cookie=bce-session; bce-login-type=PASSPORT; bce-login-display-name=%E5%8D%8A%E8%BD%BD%E5%8A%A0%E4%B8%80; Hm_lvt_28a17f66627d87f1d046eae152a1c93d=1599012153,1599012524,1599017006; BDRCVFR[feWj1Vr5u3D]=I67x6TjHwwYf0; delPer=0; H_PS_PSSID=32606_1441_32693_7544_31660_32046_32116_31321_32691; jshunter-uuid=8c6e3e91-47b3-4f26-bf93-da91c70761ee; jsdk-user=v_dingguoqiang; RT="z=1&dm=baidu.com&si=k98ov4yyjc&ss=kel0lprq&sl=22&tt=1nsx&bcn=https%3A%2F%2Ffclog.baidu.com%2Flog%2Fweirwood%3Ftype%3Dperf&ld=gfeu&cl=cgpw&ul=htka&hd=htkl"; bce-device-token=null; PSINO=2; BDUSS=R3UFY4eW4zdGIzZ2pIM1dKTUNGR1U3ejZNRVV6NnMxU2wzLVJhbGlGWFV-WFpmRUFBQUFBJCQAAAAAAAAAAAEAAACFA67ysOvU2LzT0rsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANRwT1~UcE9fUH; BDUSS_BFESS=R3UFY4eW4zdGIzZ2pIM1dKTUNGR1U3ejZNRVV6NnMxU2wzLVJhbGlGWFV-WFpmRUFBQUFBJCQAAAAAAAAAAAEAAACFA67ysOvU2LzT0rsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANRwT1~UcE9fUH; __xsptplusUT_861=1; bce-passport-stoken=8971ac3c4422f4b9cc62c88f000d4a6c67793a68ca83a2280d50988fe58907cf; bce-sessionid=001d4194bdfbb2a455f9d50abb988c4bebc; bce-user-info=2020-09-02T18:15:50Z|139d19a80446c41aae21e735981acae8; bce-session=5f6e97b64dc946eb99341d3dae78033f11e7a28e06314f8ea4ca8d8b84aeec37|92c0832d05318aca545a69b053f9c471; bce-login-expire-time="2020-09-02T10:45:50Z|b4ea9db0e119facc270488eadce15de4"; __xsptplus861=861.5.1599041741.1599041928.5%234%7C%7C%7C%7C%7C%23%23uZU8bxzTJdlmwUq5bQor8161-Ptxg5YT%23; Hm_lpvt_28a17f66627d87f1d046eae152a1c93d=1599041929; _gat_gtag_UA_138572523_1=1; BAIDU_CLOUD_TRACK_PATH=https%3A%2F%2Fcloud.baidu.com%2Fcampaign%2FPromotiondata%2Findex.html%3F_%3D1599041750469%26unifrom%3Deventpage',
    # 'csrftoken': '2020-08-13T18:37:18Z|4ed1e831797bd2b9df7e60135c888f5e',
    'Content-Type': 'application/json'
}


file_name = r'E:\BD_A\%s价格核对%s.xlsx' % (Project_name, Time1)
wb = Workbook()  # 实例对象需要wb.save(r'E:\BD_A\域名价格核对%s.xlsx'% Time1)来创建文件保存数据

# sheet重命名
sheet = wb['Sheet']
sheet.title = f'{Project_name}前后端价格对比'
Fille = PatternFill('solid', fgColor='FFBB02')  # solid 是填充实色的意思？
error_Fille = PatternFill('solid', fgColor='FF0000')  # darkVertical 是填充竖线  FF0000是红色
header_Fille = PatternFill('solid', fgColor='99FF00')  # darkVertical 是填充竖线  99FF00是黄色

# 先写头部
excel_header = ['id', '前端campaignId', '前端价格', '后端价格', '对比结果', '前端原价', '后端原价', '后端campaignId']  # 首行头部信息作为变量可更改
for i in range(len(excel_header)):
    sheet.cell(row=1, column=i+1).value = excel_header[i]
    sheet.cell(row=1, column=i+1).fill = header_Fille  # 首行颜色
    sheet.freeze_panes = wb.active.cell(row=2, column=1)  # 首行冻结

    # 单元格宽度设置
    sheet.column_dimensions['A'].width = 5
    sheet.column_dimensions['B'].width = 45
    sheet.column_dimensions['C'].width = 10
    sheet.column_dimensions['D'].width = 10
    sheet.column_dimensions['E'].width = 20  # 对比结果
    sheet.column_dimensions['F'].width = 10
    sheet.column_dimensions['G'].width = 10
    sheet.column_dimensions['H'].width = 45


data = {}
Page_M = requests.request("get", url=Page_Path, data=data, headers=page_headers)
Page_M.encoding = 'UTF-8'
PQ_Page = PyQuery(Page_M.text)

print('前端信息')
print('='*100)
# 新用户惊喜价 10元可上云
for i in PQ_Page('.module.module-0.cut-down .product.small'):
    product_name = (PyQuery(i).find('.product-header .product-title').text())  # 产品名称
    product_price = (PyQuery(i).find('.price-info .price').text())  # 产品价格
    product_id = (PyQuery(i).find('.btn ').attr('data-id'))  # 产品id
    campaignId_lists.append(product_id)
    price_lists.append(product_price)
    old_lists.append('无原价')

# 惊喜加倍 爆款年付仅3折
for i in PQ_Page('.module.module-1 .product.small'):
    product_id = PyQuery(i).find('.btn').attr('data-id')  # 产品id
    product_price = (PyQuery(i).find('.price-info .price').text())  # 产品价格
    product_old = float(product_price)+float((PyQuery(i).find('.price-info .save').text()[:-1]))  # 产品原价, 下标取到的是去掉汉字的值
    if '.' in product_price:
        campaignId_lists.append(product_id)
        price_lists.append(product_price)
        old_lists.append(product_old)
    else:
        campaignId_lists.append(product_id)
        price_lists.append(product_price+str('.0'))
        old_lists.append(product_old)


# 心选优配 全场5折起
for i in PQ_Page('.module.module-2 .product.big'):
    product_id = PyQuery(i).attr('data-prices').split(',')  # 产品id
    for j in product_id:
        product_id = j.split('@')[0]
        product_price = j.split('@')[-1]
        product_old = j.split('@')[-2:-1][0]

        # 后端为浮点数，前端为int,判断非浮点的转变为浮点，是浮点的直接添加
        if '.' not in str(product_price) and '.' not in str(product_old):
            campaignId_lists.append(product_id)
            price_lists.append(product_price + str('.0'))
            old_lists.append(product_old + str('.0'))

        elif '.' not in str(product_price):
            campaignId_lists.append(product_id)
            price_lists.append(product_price)
            old_lists.append(product_old)

        elif '.' not in product_old:
            campaignId_lists.append(product_id)
            price_lists.append(product_price)
            old_lists.append(product_old + str('.0'))

        else:
            campaignId_lists.append(product_id)
            price_lists.append(product_price)
            old_lists.append(product_old)

x = 0
for i in range(len(campaignId_lists)):
    x += 1
    sheet.cell(row=i + 2, column=1).value = x
    sheet.cell(row=i + 2, column=2).value = campaignId_lists[i]

for i in range(len(price_lists)):
    sheet.cell(row=i + 2, column=3).value = str(price_lists[i])
    sheet.cell(row=i + 2, column=3).fill = Fille  # 将当前行的每一个表格填充颜色

for i in range(len(old_lists)):
    sheet.cell(row=i + 2, column=6).value = str(old_lists[i])
    sheet.cell(row=i + 2, column=6).fill = Fille  # 将当前行的每一个表格填充颜色

print('前端信息导入完毕！')
print('=' * 100)


data_count = 0
for i in campaignId_lists:
    data_count += 1
    data = "{\"campaignId\":\"%s\"}" % i  # 阔以请求到数据
    print(data_count, data)

    # data = {"campaignId":"20200607_discount_kill_aipage_site_miniprogram_1_12m"}  # 报500错误
    count = 0

    while True:
        try:
            # 请求的时候参数必须为url,data,headers。如果headers内需要其他参数的话，必须要用headers=headers，直接写cookies=XX会报错
            result = requests.post(url=Ym_api, data=data, headers=api_headers).json()  # verify=False

        except requests.exceptions.ProxyError as e:
            print(e)
            print('远程访问被拒绝，正在重连...')
        except requests.exceptions.ConnectionError as r:
            print(r, f'\n已经{count}分钟')
            time.sleep(60)
            count += 1
        else:
            count += 1
            try :
                if result['result']['price']:
                    Price_new.append(str(result['result']['price']['campaignPrice']))#.split('.')[0])
                    Price_old.append(str(result['result']['price']['originalPrice']))#.split('.')[0])
                    Price_campaignId.append(result['result']['privilegeId'])
            except KeyError as e:
                Price_new.append('本产品查询报500')
                if result['error']:
                    Price_old.append(result['error'])
                else:
                    Price_old.append('缺少报错信息')
                Price_campaignId.append(data)
                print(result,'价格没有查出来！', data)
                pass
            break

    # # 调试第二条数据跳出
    # if data_count == 1:
    #     break

for i in range(len(Price_new)):
    sheet.cell(row=i + 2, column=4).value = str(Price_new[i])
    sheet.cell(row=i + 2, column=4).fill = Fille  # 将当前行的每一个表格填充颜色

for i in range(len(Price_old)):
    sheet.cell(row=i + 2, column=7).value = str(Price_old[i])
    sheet.cell(row=i + 2, column=7).fill = Fille  # 将当前行的每一个表格填充颜色

for i in range(len(Price_campaignId)):
    sheet.cell(row=i + 2, column=8).value = Price_campaignId[i]
print('后端信息导入完毕')
wb.save(file_name)

# =========读取数据=========
print('开始对比前后端数据...')


def read_excel(file_path, sheet_name):
    # 读取Excel表格表面数据，不读取公式，如需获取表格内公式，将data_only改为false(本代码不推荐，因为改了之后不会显示Excel数据)
    file_sheet = load_workbook(file_path, data_only=True,)[sheet_name]

    # 获取头部
    sheet_header = []
    for Header_data in range(file_sheet.max_column):
        sheet_header.append(file_sheet.cell(row=1, column=Header_data+1).value)

    # 获取数据
    data_list = []
    for data_data1 in range(file_sheet.max_row-1):
        data_dict = {}
        for data_data2 in range(len(sheet_header)):
            data_dict[sheet_header[data_data2]] = file_sheet.cell(row=data_data1+2, column=data_data2+1).value
        data_list.append(data_dict)
    return data_list  # 返回数据

# =======读取数据并且在指定列追加数据=======
file_Data = read_excel(file_name, sheet.title)
wb1 = load_workbook(file_name)
ws1 = wb1[sheet.title]

# =========数据对比=========
m = 0
for i in file_Data:
    if (i['前端价格'] == i['后端价格']) and i['前端原价'] == i['后端原价']:
        m += 1
        ws1.cell(row=m + 1, column=5).value = "前后端价格一致"  # excel追加数据

    elif (i['前端价格'] is None) or (i['前端原价'] is None):
        print(i)
        m += 1
        ws1.cell(row=m + 1, column=5).value = "没有查询到前端数据"  # excel追加数据
        ws1.cell(row=m + 1, column=5).fill = error_Fille  # 将当前行的每一个表格填充颜色
    elif (i['后端价格'] is None) or (i['后端原价'] is None):
        print(i)
        m += 1
        ws1.cell(row=m + 1, column=5).value = "没有查询到后端数据"  # excel追加数据
        ws1.cell(row=m + 1, column=5).fill = error_Fille  # 将当前行的每一个表格填充颜色

    elif i['前端价格'] != i['后端价格']:
        print(i)
        m += 1
        ws1.cell(row=m + 1, column=5).value = "售卖价格不一致"  # excel追加数据
        ws1.cell(row=m + 1, column=5).fill = error_Fille  # 将当前行的每一个表格填充颜色

    elif i['前端原价'] != i['后端原价']:
        print(i)
        m += 1
        ws1.cell(row=m + 1, column=5).value = "原价不一致"  # excel追加数据
        ws1.cell(row=m + 1, column=5).fill = error_Fille  # 将当前行的每一个表格填充颜色

wb1.save(file_name)
